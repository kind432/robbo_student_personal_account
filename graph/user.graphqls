type UserHttp {
    id: ID!
    email: String!
    password: String!
    role: Int!
    nickname: String!
    firstname: String!
    lastname: String!
    middlename: String!
    createdAt: Timestamp!
}

input UpdateUserHttp {
    id: ID!
    email: String!
    nickname: String!
    firstname: String!
    lastname: String!
    middlename: String!
}

type StudentHttp {
    userHttp: UserHttp!
    robboGroupId: String!
    robboUnitId: String!
}

input UpdateStudentHttp {
    userHttp: UpdateUserHttp!
}

type ParentHttp {
    userHttp: UserHttp!
    children: [StudentHttp!]!
}

input UpdateParentHttp {
    userHttp: UpdateUserHttp!
}

type TeacherHttp {
    userHttp: UserHttp!
}

input UpdateTeacherHttp {
    userHttp: UpdateUserHttp!
}

type UnitAdminHttp{
    userHttp: UserHttp!
}

input UpdateUnitAdminHttp {
    userHttp: UpdateUserHttp!
}

type SuperAdminHttp{
    userHttp: UserHttp!
}

input UpdateSuperAdminHttp {
    userHttp: UpdateUserHttp!
}

input NewParent {
    email: String!
    password: String!
    nickname: String!
    firstname: String!
    lastname: String!
    middlename: String!
}

input NewStudent {
    email: String!
    password: String!
    nickname: String!
    firstname: String!
    lastname: String!
    middlename: String!
    parentId: String!
}

input NewTeacher {
    email: String!
    password: String!
    nickname: String!
    firstname: String!
    lastname: String!
    middlename: String!
}

input NewUnitAdmin {
    email: String!
    password: String!
    nickname: String!
    firstname: String!
    lastname: String!
    middlename: String!
}

input UpdateStudentInput {
    studentHttp: UpdateStudentHttp!
}

input UpdateParentInput {
    parentHttp: UpdateParentHttp!
}

input UpdateTeacherInput {
    teacherHttp: UpdateTeacherHttp!
}

input UpdateUnitAdminInput {
    unitAdminHttp: UpdateUnitAdminHttp!
}

input UpdateSuperAdminInput {
    superAdminHttp: UpdateSuperAdminHttp!
}

type StudentHttpList {
    students: [StudentHttp!]
}

type Error {
    code: Int!
    message: String!
}

union StudentResult = StudentHttp | Error

type Mutation {
    CreateStudent(input: NewStudent!): StudentHttp!
    UpdateStudent(input: UpdateStudentInput!): StudentHttp!
    DeleteStudent(studentId: String!): String!
    SetRobboGroupIdForStudent(studentId: String!, robboGroupId: String!, robboUnitId: String!): String!
    CreateStudentTeacherRelation(studentId: String!, teacherId: String!): StudentResult!
    DeleteStudentTeacherRelation(studentId: String!, teacherId: String!): StudentResult!
    CreateTeacher(input: NewTeacher!): TeacherHttp!
    UpdateTeacher(input: UpdateTeacherInput!): TeacherHttp!
    DeleteTeacher(teacherId: String!): String!
    CreateParent(input: NewParent!): ParentHttp!
    AddChildToParent(parentId: String!, childId: String!): String!
    UpdateParent(input: UpdateParentInput!): ParentHttp!
    DeleteParent(parentId: String!): String!
    CreateUnitAdmin(input: NewUnitAdmin!): UnitAdminHttp!
    UpdateUnitAdmin(input: UpdateUnitAdminInput!): UnitAdminHttp!
    DeleteUnitAdmin(UnitAdminId: String!): String!
    SetNewUnitAdminForRobboUnit(unitAdminId: String!, robboUnitId: String!): String!
    DeleteUnitAdminForRobboUnit(unitAdminId: String!, robboUnitId: String!): String!
    UpdateSuperAdmin(input: UpdateSuperAdminInput!): SuperAdminHttp!
}

type Query {
    GetStudentsByParentId(parentId: String!): [StudentHttp!]!
    GetStudentById(studentId: String!): StudentHttp!
    GetStudentsByRobboGroup(robboGroupId: String!): [StudentHttp!]!
    GetStudentsByRobboUnitId(robboUnitId: String!): [StudentHttp!]!
    GetStudentsByTeacherId(teacherId: String!): [StudentHttp!]!
    SearchStudentsByEmail(email: String!, parentId: String!): [StudentHttp!]!
    GetAllTeachers: [TeacherHttp!]!
    GetTeacherById(teacherId: String!): TeacherHttp!
    GetTeachersByRobboGroupId(robboGroupId: String!): [TeacherHttp!]!
    GetTeachersByStudentId(studentId: String!): [TeacherHttp!]!
    GetAllParents: [ParentHttp!]!
    GetParentById(parentId: String!): ParentHttp!
    GetAllUnitAdmins: [UnitAdminHttp!]!
    GetUnitAdminsByRobboUnitId(robboUnitId: String!): [UnitAdminHttp!]!
    GetUnitAdminById(unitAdminId: String!): UnitAdminHttp!
    SearchUnitAdminsByEmail(email: String!, robboUnitId: String!): [UnitAdminHttp!]!
    GetSuperAdminById(superAdminId: String!): SuperAdminHttp!
}

scalar Timestamp
