type UserHttp {
    id: ID!
    email: String!
    password: String!
    role: Int!
    nickname: String!
    firstname: String!
    lastname: String!
    middlename: String!
    createdAt: Timestamp!
}

type StudentHttp {
    userHttp: UserHttp!
    robboGroupId: String!
    robboUnitId: String!
}

type ParentHttp {
    userHttp: UserHttp!
    children: [StudentHttp!]!
}

input NewParent {
    email: String!
    password: String!
    nickname: String!
    firstname: String!
    lastname: String!
    middlename: String!
}

input NewStudent {
    email: String!
    password: String!
    nickname: String!
    firstname: String!
    lastname: String!
    middlename: String!
    robboGroupId: String!
    robboUnitId: String!
}

type Mutation {
    createStudent(input: NewStudent!): StudentHttp!
    createParent(input: NewParent!): ParentHttp!
}

type Query {
    Students(limit: Int = 10, offset: Int = 0): [StudentHttp]
    GetAllParents:[ParentHttp!]!
    GetParentById(parentId: String!):ParentHttp!
}

scalar Timestamp
